#
# Shell基本設定
#
set -o vi  # viモードへ切り替え
export LC_LANG=ja_JP.UTF-8  # 言語設定
export EDITOR='vim'  # デフォルトエディタをvimに
export SUDO_EDITOR=$EDITOR  # `sudo`時のエディタを共通にする
HISTSIZE=500000  # ヒストリーの数

[[ -f $HOME/.bash_aliases ]] && source $HOME/.bash_aliases
[[ -f $HOME/.bash_envs ]] && source $HOME/.bash_envs  # 個別環境用の外部ファイルがあれば読み込み

# Functions
cdd() {
    command cd "$@"
    local s=$?
    if [[ ($s -eq 0) && (${#FUNCNAME[*]} -eq 1) ]]; then
        history -s cd $(printf "%q" "$PWD")
    fi
    return $s
}

hispecory() {
    sh --rcfile ~/.bashrc -c "$(cat ~/.bash_history | LC_ALL=C sort | uniq |  peco)"
}    

lossless-search() {
    local LOSSLESS_BUCKET=$(echo ${LOSSLESS_MUSIC_BUCKET:?バケットが指定されていないです} | sed -E "s/:/\\\\:/g" )

    aws s3 ls --recursive "${LOSSLESS_MUSIC_BUCKET}" | egrep "Lossless/.*$1" | sed -E "s/ +/ /g" | \
       sed -E "s:Lossless:${LOSSLESS_BUCKET}Lossless:g" | cut -f 4- -d" "  # | sed -E "s/^/\"/g" | sed -E "s/$/\"/g"
}

lossless-cp()  (
    IFS_BACKUP=$IFS
    IFS=$'\n'
    for i in $(lossless-search "$1")
    do
        aws s3 cp $i $2
    done
    IFS=$IFS_BACKUP
)

share_history() {
    history -a
    history -c
    history -r
}

PROMPT_COMMAND='share_history'
shopt -u histappend

# prompt
PS1="\
    \[\e[37m\]\t>\[\e[00m\] \
    \[\e[1;35m\]\h\[\e[00m\] \
    [\[\e[1;4;33m\]\w\[\e[00m\]] \n\
    \`
    if [ \$? = 0 ]; then
        echo \[\e[1\;32m\];
    else
        echo \[\e[1\;31m\];
    fi
    \`\
        \u "'$(__git_ps1)'" $ \[\e[00m\]"

# - - - - -

# Mac時の設定
if [ `uname` = "Darwin" ]; then
    alias vi='vim'
    export PATH=/Applications/MacVim.app/Contents/bin:$HOME/Library/Python/2.7/bin:$HOME/usr/local/bin:/usr/local/sbin:/usr/local/bin:$PATH
    # export SUDO_EDITOR='vim --cmd let{"g:singleton#entrust_pattern"}="."'

    alias ctags='/usr/local/Cellar/ctags/5.8_1/bin/ctags'

    [[ -r "/usr/local/etc/profile.d/bash_completion.sh" ]] && source "/usr/local/etc/profile.d/bash_completion.sh"

    [[ -f "${HOME}/.iterm2_shell_integration.bash" ]] && source "${HOME}/.iterm2_shell_integration.bash"
    
fi

# - - - - -
#
# General
#

alias ls='ls -F -G'
alias ll='ls -l'

# 
# git
#
[ -s "/usr/local/etc/bash_completion.d/git-completion.bash" ] && source /usr/local/etc/bash_completion.d/git-completion.bash
[ -s "/Library/Developer/CommandLineTools/usr/share/git-core/git-completion.bash" ] && source /Library/Developer/CommandLineTools/usr/share/git-core/git-completion.bash
[ -s "/usr/share/doc/git-1.8.3.1/contrib/completion/git-completion.bash" ] && source /usr/share/doc/git-1.8.3.1/contrib/completion/git-completion.bash

[ -s "/usr/local/etc/bash_completion.d/git-prompt.sh" ] && source /usr/local/etc/bash_completion.d/git-prompt.sh
[ -s "/Library/Developer/CommandLineTools/usr/share/git-core/git-prompt.sh" ] && source /Library/Developer/CommandLineTools/usr/share/git-core/git-prompt.sh
[ -s "/usr/share/git-core/contrib/completion/git-prompt.sh" ] && source /usr/share/git-core/contrib/completion/git-prompt.sh

[ -s "$HOME/.scm_breeze/scm_breeze.sh" ] && source "$HOME/.scm_breeze/scm_breeze.sh"

alias gitroot='cd `(git rev-parse --show-toplevel)`'

# Network- - - - -

# rsync
alias sudosync='rsync --rsync-path='\''sudo rsync'\'' -e '\''ssh -t'\'

# ssh
eval `ssh-agent` > /dev/null 2>&1
alias ssh="ssh-add;ssh"

# - - - - -


# Language Runtime - - - - -
# python
export PYTHONSTARTUP=~/.pythonrc
export PYTHONIOENCODING=UTF-8

export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
if which pyenv > /dev/null 2>&1; then eval "$(pyenv init -)"; fi
if which pipenv > /dev/null 2>&1; then eval "$(_PIPENV_COMPLETE=bash_source pipenv)"; fi
[[ -s $HOME/npoi_dotfiles/fabric-completion.bash ]] && source $HOME/npoi_dotfiles/fabric-completion.bash

# Ruby
if which rbenv > /dev/null 2>&1; then eval "$(rbenv init -)"; fi
export PATH="$HOME/.local/bin:$HOME/.rbenv/bin:$PATH"

# Node.js
NODEBREW_HOME=/usr/local/var/nodebrew/current
export NODEBREW_HOME
export NODEBREW_ROOT=/usr/local/var/nodebrew

export PATH=$PATH:$NODEBREW_HOME/bin

# deno
export DENO_INSTALL="$HOME/.deno"
export PATH="$DENO_INSTALL/bin:$PATH"

# go
export PATH="$HOME/go/bin:$PATH"

# docker
alias dj='docker run -it --rm -p 8888:8888 -v $(pwd):/home/jovyan/work '$DOCKER_STACK_HASH
alias lman='docker run --rm -it man man'
alias d='docker'
alias db='docker build --squash=true -t'
alias de='docker exec -it nginx /bin/bash'
alias dr='docker rm -f nginx;docker run -d --name nginx -p 8080:80 -p 8443:443 ccport/nginx:2.0'

# kubernetes
if which kubectl > /dev/null 2>&1; then
  eval "$(kubectl completion bash)"
  alias ku=kubectl
fi
if which kompose > /dev/null 2>&1; then eval "$(kompose completion bash)"; fi
if which minikube > /dev/null; then eval $(minikube docker-env); fi

# Homebrew(Linux)
[[ -f /home/linuxbrew/.linuxbrew/bin/brew ]] && eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

# direnv
if which direnv > /dev/null 2>&1; then
  eval "$(direnv hook bash)"

  direnv_cd() {
    cd "$1"
    eval "$(direnv export bash)"
  }
fi

# Vagrant
export VAGRANT_HOME="$HOME/.vagrant.d/"


# AWS
if which aws_completer > /dev/null 2>&1; then complete -C $(which aws_completer) aws; fi

#
# ghq
#
function ghql() {
  local selected_file=$(ghq list --full-path | peco --query "$LBUFFER")
  if [ -n "$selected_file" ]; then
    if [ -t 1 ]; then
      echo ${selected_file}
      cd ${selected_file}
      pwd
    fi
  fi
}

# bind -x '"\201": ghql'
# bind '"\C-g":"\201\C-m"'

# terraform
if which terraform > /dev/null 2>&1; then complete -C $(which terraform) terraform; fi


# 最後に優先度の高いものを定義し直し
export PATH="$PATH:$HOME/bin"
export VOLTA_HOME="$HOME/.volta"
export PATH="$VOLTA_HOME/bin:$PATH"

export FLYCTL_INSTALL="/home/npoi/.fly"
export PATH="$FLYCTL_INSTALL/bin:$PATH"

export PATH="$HOME/.tfenv/bin:$PATH"

source /home/nakahara/.local/share/bash-completion/completions/deno.bash

export DENO_CERT="/etc/ssl/certs/zs.pem"
export DENO_TLS_CA_STORE="system"
